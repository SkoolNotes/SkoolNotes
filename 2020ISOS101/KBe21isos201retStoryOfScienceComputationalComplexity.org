#+TITLE: Story of Science: Computational Complexity Theory
#+CONTEXT: 21ISOS201
#+AUTHOR: Albert H
* sources
** gentle introductions
*** https://en.wikipedia.org/wiki/Computational_complexity_theory
*** https://complexityzoo.net/Petting_Zoo
* overview
** computational complexity theory studies how "difficult" a problem is
*** importantly, not how "good" an algorithm is... this field deals with all algorithms that solve a given problem
** key concepts
*** types of problems
*** Turing machines
*** reducibility
*** complexity classes
*** hierarchy
** key problems
*** P vs NP
* flows
** Wikipedia computational complexity theory
*** computational problems
**** problem instances
	 A problem describes the problem. the actual "numbers" that describe a specific problem is called a problem instance. sorting a list is a problem, sorting /this/ list is a problem instance.
**** representing problem instances
	 formally strings of characters from alphabets. The input size is the length of the string. Different representations can be chosen but it should be trivial (fast) to convert from one to the other.
**** decision problems (most basic type)
	 Generally, given an input, the output is either yes (accept) or no (reject). For example, deciding whether a graph is connected or not.
***** it can be thought of as a "formal language"                  :toexpand:
**** function problems
	 Very general: a function problem 'is a computational problem where a single output (of a total function) is expected for every input, but the output is more complex than that of a decision problem'. Basically calculate a non-binary function.

	 Examples: traveling salesman, integer factorization.

	 However, all function problems can be modeled as decision problems: For some function $f(*args) \to ans$, it can be modeled as the decision problem of whether $(*args, ans)$ is a valid output.
***** but does this really work? how can a decision TM be used to compute the function output efficiently? :toexpand:
**** size of an instance
	 Size is usually the length of the input. The complexity is a function of the input size, usually representing the worst case time or space (or any other complexity measure) required for any input size.
*** machine models and complexity measures
**** Turing machine
	 standard Turing machine stuff. its very general. Many types of turing machines (probabilistic, non-deterministic, quantum, etc) are used to define different complexity classes.
